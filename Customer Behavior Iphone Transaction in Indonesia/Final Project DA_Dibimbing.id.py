# -*- coding: utf-8 -*-
"""Final Project DA - Roy Firman Sihombing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jUMyYGccMprWijgcKOqOsekAUCBkPf5n

# Analisis Transaksi Penjualan iPhone


> Final Project Data Analyst

1. Latar Belakang
iPhone merupakan salah satu produk smartphone premium dengan tingkat penjualan tinggi di Indonesia. Untuk mendukung strategi bisnis berbasis data, perusahaan perlu memahami lebih dalam pola pembelian pelanggan, mulai dari perilaku pembelian, usia, segmentasi pelanggan, respons terhadap diskon, hingga perbedaan pola pembelian antar kota. Analisis ini bertujuan untuk membantu pengambilan keputusan strategis dalam hal pemasaran dan retensi pelanggan.

2. Tujuan
- Membersihkan dan mempersiapkan dataset agar siap dianalisis.
- Mengidentifikasi tren penjualan berdasarkan waktu, usia, dan lokasi pelanggan.
- Mengelompokkan pelanggan ke dalam segmen berdasarkan perilaku pembelian.
- Menganalisis pengaruh diskon terhadap pola pembelian.
- Memberikan insight untuk strategi pemasaran dan pengelolaan relasi pelanggan.


3. Dataset
- transactions.csv – Data transaksi utama
- transaction_details.csv – Detail produk di tiap transaksi
- products.csv – Informasi spesifikasi produk
- customers.csv – Informasi pelanggan
"""

from google.colab import drive
drive.mount('/content/drive')
folder_path = '/content/drive/My Drive/FINAL PROJECT DATA ANALYST/'

"""# Tahapan Analisis

## Persiapan dan Import Dataset
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
import scipy.stats as stats

# Scalling untuk MinMax Scaller
from sklearn.preprocessing import MinMaxScaler
# Set the maximum number of columns and rows to display to a large number
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

# Load files
df_transactions = pd.read_csv(folder_path + 'transactions.csv')
df_transaction_details = pd.read_csv(folder_path + 'transaction_details.csv')
df_products = pd.read_csv(folder_path + 'products.csv')
df_customers = pd.read_csv(folder_path + 'customers.csv')

# tampilkan 5 data pertama
df_transactions.head()

df_transaction_details.head()

df_customers.head()

df_customers["city"].unique()

df_products

print("products:", df_products.columns.tolist())

"""## Penggabungan Dataset"""

# Merge transaction_details + products
merged = pd.merge(df_transaction_details, df_products, on='product_id', how='left')

# Merge hasilnya dengan transactions
merged = pd.merge(merged, df_transactions, on='transaction_id', how='left')

# Merge hasilnya dengan customers (via customer_id dari transactions)
merged = pd.merge(merged, df_customers, on='customer_id', how='left')

print("Merged columns:\n", merged.columns.tolist())

iphone_transaction = merged[[
    'transaction_id',
    'transaction_date',
    'customer_id',
    'name',
    'age',
    'city_y',
    'product_id_x',
    'product_name',
    'storage',
    'color',
    'shipping_method',
    'payment_method',
    'quantity',
    'unit_price',
    'price',
    'coupon_code',
    'discount_x',
    'total'
]].rename(columns={
    'product_id_x': 'product_id',
    'discount_x': 'discount',
    'city_y': 'city'
})

# Tampilkan hasil
iphone_transaction.head()

iphone_transaction.to_csv("iphone_transaction.csv", index=False)

df = pd.read_csv(folder_path + 'iphone_transaction.csv')
df.head()

df.info()

"""## Data Cleaning

### Menghapus Duplikasi
"""

len(df.drop_duplicates()) / len(df)

print("Jumlah duplikat persis:", df.duplicated().sum())

df[df.duplicated(keep=False)]

df.drop_duplicates(inplace=True)

print("Jumlah duplikat persis:", df.duplicated().sum())

"""### Menangani Data Outlier"""

# Kolom numerik yang ingin dianalisis
cols = ['age', 'quantity', 'unit_price', 'price', 'total']
data = df[cols]

# Loop untuk boxplot
for col in cols:
    plt.figure(figsize=(15, 4))

    # Boxplot
    plt.subplot(1, 3, 3)
    sns.boxplot(x=data[col])
    plt.title(f'Boxplot {col}')

    plt.tight_layout()
    plt.show()

"""### Menangani Missing Value"""

df.isna().sum()

df.isnull().sum()

df['coupon_code'].unique()

df['coupon_code'].fillna('NONKUPON', inplace=True)

df['coupon_code'].unique()

"""### Menghapus Data Harga Abnormal"""

df['selisih_harga'] = df['unit_price'] - df['price']

def classify_price(row):
    selisih = row['selisih_harga']
    if selisih == 0:
        return 'Normal'
    elif 0 >= selisih >= -4000000:
        return 'Normal Di Bawah'
    elif 0 <= selisih <= 3000000:
        return 'Normal Di Atas'
    else:
        return 'Abnormal'

df['keterangan_harga'] = df.apply(classify_price, axis=1)

df.head()

# Jumlah data dengan keterangan "Abnormal"
abnormal_count = df["keterangan_harga"].value_counts().get("Abnormal", 0)
print("Jumlah data Abnormal:", abnormal_count)

# Jumlah total data
total_data = len(df)
print("Jumlah total data:", total_data)

"""**Untuk menghindari ketidaksesuaian harga dan potensi kesalahan analisis, data dengan keterangan harga 'Abnormal' dihapus dari dataset.**"""

df = df[df['keterangan_harga'] != 'Abnormal'].copy()

df["keterangan_harga"].value_counts()

df.info()

df['customer_id'].nunique()

"""### Kategori Umur"""

usia_bins = [17, 25, 35, 45, 55, 65, df['age'].max()]
usia_labels = ['18-25', '26-35', '36-45', '46-55', '56-65', '65+']
df['usia_group'] = pd.cut(df['age'], bins=usia_bins, labels=usia_labels)

df['transaction_date'] = pd.to_datetime(df['transaction_date'])
df = df[df['transaction_date'].dt.year != 2021].copy()

"""## Exploratory Data Analysis (EDA)

"""

# Setup visual
sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)

"""### Frekuensi Transaksi per Bulan"""

import calendar
monthly_freq = (
    df.groupby(df['transaction_date'].dt.month)['transaction_id']
    .nunique()
    .reindex(range(1, 13), fill_value=0)
    .reset_index()
)
monthly_freq.columns = ['month', 'count']
monthly_freq['month_name'] = monthly_freq['month'].apply(lambda x: calendar.month_name[x])

plt.figure()
sns.lineplot(data=monthly_freq, x='month_name', y='count', marker='o', color='teal')
plt.title("Frekuensi Transaksi per Bulan")
plt.xlabel("Bulan")
plt.ylabel("Jumlah Transaksi")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Frekuensi transaksi meningkat pada bulan tertentu (kemungkinan bertepatan dengan promo atau musim liburan).

### Distribusi Metode Pembayaran
"""

plt.figure()
ax = sns.countplot(data=df, x='payment_method', palette='Set2', order=df['payment_method'].value_counts().index)
for p in ax.patches:
    ax.annotate(f"{int(p.get_height())}", (p.get_x() + 0.1, p.get_height() + 500), fontsize=10)
plt.title("Distribusi Metode Pembayaran")
plt.xlabel("Metode Pembayaran")
plt.ylabel("Jumlah Transaksi")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Metode pembayaran paling banyak digunakan adalah Dana, namun distribusinya cukup berimbang antara Dana, Ovo, Gopay, dan Transfer Bank, menandakan pelanggan memiliki preferensi yang bervariasi dan cenderung nyaman dengan berbagai opsi pembayaran digital maupun konvensional.

### Distribusi Total Pembayaran
"""

# Buat kategori sementara tanpa menambah kolom ke df
bins = [5000000, 10000000, 15000000, 20000000, df['total'].max()]
labels = ['5-10jt', '10-15jt', '15-20jt', '>20jt']
total_group_temp = pd.cut(df['total'], bins=bins, labels=labels, include_lowest=True)

# Visualisasi
plt.figure()
ax = sns.countplot(x=total_group_temp, palette='coolwarm', order=labels)
for p in ax.patches:
    ax.annotate(f"{int(p.get_height())}", (p.get_x() + 0.1, p.get_height() + 500), fontsize=10)
plt.title("Distribusi Total Pembayaran")
plt.xlabel("Kelompok Total")
plt.ylabel("Jumlah Transaksi")
plt.tight_layout()
plt.show()

"""Total pembayaran terbanyak berada di kisaran >20 juta. Nilai ini tidak selalu mencerminkan harga satu unit iPhone, melainkan bisa berasal dari pembelian lebih dari satu unit sekaligus atau kombinasi beberapa produk dalam satu transaksi.

### Jumlah Transaksi per Kota
"""

plt.figure()
ax = sns.countplot(data=df, x='city', palette='Set1', order=df['city'].value_counts().index)
for p in ax.patches:
    ax.annotate(f"{int(p.get_height())}", (p.get_x() + 0.05, p.get_height() + 500), fontsize=10)
plt.title("Jumlah Transaksi per Kota")
plt.xlabel("Kota")
plt.ylabel("Jumlah Transaksi")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Kota Jakarta dengan transaksi tertinggi menunjukkan wilayah pasar potensial yang harus menjadi prioritas distribusi.

### Distribusi Usia Pelanggan
"""

plt.figure()
ax = sns.countplot(data=df, x='usia_group', palette='mako')
for p in ax.patches:
    ax.annotate(f"{int(p.get_height())}", (p.get_x() + 0.05, p.get_height() + 500), fontsize=10)
plt.title("Distribusi Usia Pelanggan")
plt.xlabel("Kelompok Usia")
plt.ylabel("Jumlah Pelanggan")
plt.tight_layout()
plt.show()

"""Pelanggan didominasi usia 46-55 tahun, segmen ini adalah target utama untuk pemasaran produk premium.

Warna populer cenderung warna netral seperti silver, menunjukkan preferensi pelanggan pada desain elegan dan klasik yang cocok untuk berbagai segmen.
"""

df.head()

df.to_csv("data_final.csv", index=False)